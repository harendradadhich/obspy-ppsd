#!/usr/bin/env python
# Copyright 2019 Tom Eulenfeld, MIT license

import argparse
from argparse import SUPPRESS
from ast import literal_eval
import inspect
import os.path
import re

from obspy import read, read_inventory
from obspy.signal.spectral_estimation import PPSD
try:
    from tqdm import tqdm
except ImportError:
    def tqdm(x): return x


__version__ = '0.1'
NPZFNAME = 'ppsd_data_{}.npz'
PLOT1FNAME = 'ppsd_plot_{}.png'
PLOT2FNAME = 'ppsd_timeplot_{}.png'
PLOT3FNAME = 'ppsd_spectrogram_{}.png'


class PPSDError(ValueError):
    pass


def add_data_files_to_pssd(data, inventory=None, format=None, output='.',
                           **kwargs):
    inv = None
    ppsds = {}
    print('process files')
    for fname in tqdm(data):
        stream = read(fname, format=format)
        for tr in stream:
            id_ = tr.id
            if id_ not in ppsds:
                if inv is None:
                    if inventory is None:
                        raise PPSDError('Please specify inventory file')
                    inv = read_inventory(inventory)
                fname = os.path.join(output, NPZFNAME.format(id_))
                if os.path.exists(fname):
                    ppsds[id_] = PPSD.load_npz(fname, inv)
                else:
                    ppsds[id_] = PPSD(tr.stats, inv, **kwargs)
            ppsds[id_].add(tr)
    print('write results')
    for id_, ppsd in (tqdm(ppsds.items())):
        fname = os.path.join(output, NPZFNAME.format(id_))
        ppsd.save_npz(fname)


def plot(ppsd,  output='.', **kwargs):
    for fname_ppsd in ppsd:
        ppsd = PPSD.load_npz(fname_ppsd)
        fname = os.path.join(output, PLOT1FNAME.format(ppsd.id))
        ppsd.plot(fname, **kwargs)


def plot_temporal(ppsd,  output='.', **kwargs):
    for fname_ppsd in ppsd:
        ppsd = PPSD.load_npz(fname_ppsd)
        fname = os.path.join(output, PLOT2FNAME.format(ppsd.id))
        ppsd.plot_temporal(filename=fname, **kwargs)


def plot_spectrogram(ppsd,  output='.', **kwargs):
    for fname_ppsd in ppsd:
        ppsd = PPSD.load_npz(fname_ppsd)
        fname = os.path.join(output, PLOT3FNAME.format(ppsd.id))
        ppsd.plot_spectrogram(filename=fname, **kwargs)


def load(ppsd):
    ppsd = PPSD.load_npz(ppsd)
    from IPython import start_ipython
    print('PPSD object loaded into ppsd variable.')
    start_ipython(argv=[], user_ns={'ppsd': ppsd}, display_banner=False)
    print('Good Bye')


def run(command, pdb=False, **args):
    if pdb:
        import traceback
        import pdb

        def info(type, value, tb):
            traceback.print_exception(type, value, tb)
            print
            # ...then start the debugger in post-mortem mode.
            pdb.pm()
    fmap = {'add': add_data_files_to_pssd,
            'plot': plot,
            'timeplot': plot_temporal,
            'spectrogram': plot_spectrogram,
            'load': load}
    fmap[command](**args)


def add_options(parser, func, ignore=(), mandatory=()):
    ignore = ignore + ('self', 'filename')
    doc = inspect.getdoc(func)
    for kw in inspect.getfullargspec(func)[0]:
        if kw not in ignore:
            pattern = r':param\s*%s:\s*(.*?)\s*(:param|:type|$)' % kw
            match = re.search(pattern, doc, flags=re.DOTALL)
            try:
                msg = match.groups()[0]
            except:
                msg = None
            if kw in mandatory:
                parser.add_argument(kw.replace('_', '-'), type=literal_eval,
                                    help=msg)
            else:
                parser.add_argument(
                        '--' + kw.replace('_', '-'), type=literal_eval,
                        default=SUPPRESS, help=msg)


def run_cmdline():
    msg = ('Command line script to calculate and plot '
           'probabilistic power spectral densities with ObsPy')
    epilog = 'To get help on a subcommand run: obspy-ppsd command -h'
    p = argparse.ArgumentParser(description=msg, epilog=epilog)
    version = '%(prog)s ' + __version__
    p.add_argument('--version', action='version', version=version)
    msg = 'if an exception occurs start the debugger'
    p.add_argument('--pdb', action='store_true', help=msg)
    p.add_argument('-o', '--output', help='output directory', default=SUPPRESS)

    sub = p.add_subparsers(title='commands', dest='command')
    sub.required = True
    msg = ('Add files to PPSD objects. If a PPSD object was previously stored '
           'it will be reuesed. The optional arguments correspond to the '
           'options in PPSD.__init__() and will be used if a new PPSD object '
           'is created.')
    p_add = sub.add_parser('add', help='add files to PPSDs', description=msg)
    p_plot1 = sub.add_parser('plot', help='plot PPSDs')
    p_plot2 = sub.add_parser('timeplot', help='plot PPSDs versus time')
    p_plot3 = sub.add_parser('spectrogram', help='plot PPSDs as spectrogram')
    p_load = sub.add_parser('load',
                            help='load single PPSD into IPython session')

    add_options(p_add, PPSD.__init__, ignore=('stats', 'metadata', 'kwargs'))
    add_options(p_plot1, PPSD.plot)
    add_options(p_plot2, PPSD.plot_temporal, mandatory=('period,'))
    add_options(p_plot3, PPSD.plot_spectrogram)
    p_add.add_argument('data', nargs='+', help='data files')
    p_add.add_argument('-i', '--inventory', help='inventory file')
    p_add.add_argument('-f', '--format', help='format of data files')
    p_plot1.add_argument('ppsd', nargs='+', help='PPSD files in npz format')
    p_plot2.add_argument('ppsd', nargs='+', help='PPSD files in npz format')
    p_plot3.add_argument('ppsd', nargs='+', help='PPSD files in npz format')
    p_load.add_argument('ppsd', help='PPSD file in npz format')

    args = vars(p.parse_args())
    try:
        run(**args)
    except PPSDError as ex:
        p.error(ex)


if __name__ == '__main__':
    run_cmdline()
